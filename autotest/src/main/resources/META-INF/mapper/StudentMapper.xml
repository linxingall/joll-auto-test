<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.joll.automate.tms.test.persistence.StudentDao">
     <resultMap id="BaseResultMap" type="org.joll.automate.tms.test.model.StudentDo">
          <id column="ID" jdbcType="INTEGER" property="id" />
          <result column="NAME" jdbcType="VARCHAR" property="name" />
          <result column="AGE" jdbcType="INTEGER" property="age" />
     </resultMap>
     <sql id="Query_Where_Clause">
          <where>
               <foreach collection="oredCriteria" item="criteria" separator="or">
                    <if test="criteria.valid">
                         <trim prefix="(" prefixOverrides="and" suffix=")">
                              <foreach collection="criteria.criteria" item="criterion">
                                   <choose>
                                        <when test="criterion.noValue">
                                             and ${criterion.condition}
                                        </when>
                                        <when test="criterion.singleValue">
                                             and ${criterion.condition} #{criterion.value}
                                        </when>
                                        <when test="criterion.betweenValue">
                                             and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                        </when>
                                        <when test="criterion.listValue">
                                             and ${criterion.condition}
                                             <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                                  #{listItem}
                                             </foreach>
                                        </when>
                                   </choose>
                              </foreach>
                         </trim>
                    </if>
               </foreach>
          </where>
     </sql>
     <sql id="Update_By_Query_Where_Clause">
          <where>
               <foreach collection="example.oredCriteria" item="criteria" separator="or">
                    <if test="criteria.valid">
                         <trim prefix="(" prefixOverrides="and" suffix=")">
                              <foreach collection="criteria.criteria" item="criterion">
                                   <choose>
                                        <when test="criterion.noValue">
                                             and ${criterion.condition}
                                        </when>
                                        <when test="criterion.singleValue">
                                             and ${criterion.condition} #{criterion.value}
                                        </when>
                                        <when test="criterion.betweenValue">
                                             and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                        </when>
                                        <when test="criterion.listValue">
                                             and ${criterion.condition}
                                             <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                                  #{listItem}
                                             </foreach>
                                        </when>
                                   </choose>
                              </foreach>
                         </trim>
                    </if>
               </foreach>
          </where>
     </sql>
     <sql id="Base_Column_List">
          ID, NAME, AGE
     </sql>
     <select id="selectByQuery" parameterType="org.joll.automate.tms.test.model.Query.StudentQuery" resultMap="BaseResultMap">
          select
          <if test="distinct">
               distinct
          </if>
          <include refid="Base_Column_List" />
          from student
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
          <if test="orderByClause != null">
               order by ${orderByClause}
          </if>
     </select>
     <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
          select 
          <include refid="Base_Column_List" />
          from student
          where ID = #{id,jdbcType=INTEGER}
     </select>
     <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
          delete from student
          where ID = #{id,jdbcType=INTEGER}
     </delete>
     <delete id="deleteByQuery" parameterType="org.joll.automate.tms.test.model.Query.StudentQuery">
          delete from student
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
     </delete>
     <insert id="insert" parameterType="org.joll.automate.tms.test.model.StudentDo">
          <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
               SELECT LAST_INSERT_ID()
          </selectKey>
          insert into student (NAME, AGE)
          values (#{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER})
     </insert>
     <insert id="insertSelective" parameterType="org.joll.automate.tms.test.model.StudentDo">
          <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
               SELECT LAST_INSERT_ID()
          </selectKey>
          insert into student
          <trim prefix="(" suffix=")" suffixOverrides=",">
               <if test="name != null">
                    NAME,
               </if>
               <if test="age != null">
                    AGE,
               </if>
          </trim>
          <trim prefix="values (" suffix=")" suffixOverrides=",">
               <if test="name != null">
                    #{name,jdbcType=VARCHAR},
               </if>
               <if test="age != null">
                    #{age,jdbcType=INTEGER},
               </if>
          </trim>
     </insert>
     <select id="countByQuery" parameterType="org.joll.automate.tms.test.model.Query.StudentQuery" resultType="java.lang.Long">
          select count(*) from student
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
     </select>
     <update id="updateByQuerySelective" parameterType="map">
          update student
          <set>
               <if test="record.id != null">
                    ID = #{record.id,jdbcType=INTEGER},
               </if>
               <if test="record.name != null">
                    NAME = #{record.name,jdbcType=VARCHAR},
               </if>
               <if test="record.age != null">
                    AGE = #{record.age,jdbcType=INTEGER},
               </if>
          </set>
          <if test="_parameter != null">
               <include refid="Update_By_Query_Where_Clause" />
          </if>
     </update>
     <update id="updateByQuery" parameterType="map">
          update student
          set ID = #{record.id,jdbcType=INTEGER},
               NAME = #{record.name,jdbcType=VARCHAR},
               AGE = #{record.age,jdbcType=INTEGER}
          <if test="_parameter != null">
               <include refid="Update_By_Query_Where_Clause" />
          </if>
     </update>
     <update id="updateByPrimaryKeySelective" parameterType="org.joll.automate.tms.test.model.StudentDo">
          update student
          <set>
               <if test="name != null">
                    NAME = #{name,jdbcType=VARCHAR},
               </if>
               <if test="age != null">
                    AGE = #{age,jdbcType=INTEGER},
               </if>
          </set>
          where ID = #{id,jdbcType=INTEGER}
     </update>
     <update id="updateByPrimaryKey" parameterType="org.joll.automate.tms.test.model.StudentDo">
          update student
          set NAME = #{name,jdbcType=VARCHAR},
               AGE = #{age,jdbcType=INTEGER}
          where ID = #{id,jdbcType=INTEGER}
     </update>
</mapper>